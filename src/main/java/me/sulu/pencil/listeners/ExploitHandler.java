package me.sulu.pencil.listeners;

import me.sulu.pencil.Pencil;
import me.sulu.pencil.util.Util;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.ThreadChannel;
import net.dv8tion.jda.api.events.interaction.ButtonClickEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.Button;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class ExploitHandler extends ListenerAdapter {
  public static final Logger LOGGER = LogManager.getLogger();

  @Override
  public void onButtonClick(ButtonClickEvent event) {
    switch (event.getComponentId()) {
      case "exploit-report" -> sendExploitConfirmation(event);
      case "exploit-confirm" -> handleExploitReport(event);
    }
  }

  private void sendExploitConfirmation(ButtonClickEvent event) {
    event.replyEmbeds(
        new EmbedBuilder()
          .setTitle("Are you sure you would like to open an exploit report?")
          .setDescription("Exploit reports are only for serious, gamebreaking and exploitable issues that are better reported privately. " +
            "For non-exploitable or well-known bugs, please create an issue on our public issue tracker. " +
            "If you are having trouble with your server or think you have found a bug but are not sure, ask in <#289587909051416579>.")
          .setFooter("To cancel your report, click \"Dismiss message\".", "https://static.sulu.me/images/logos/paper/64.webp")
          .setColor(9966604)
          .build()
      )
      .addActionRow(
        Button.link("https://github.com/PaperMC/Paper/issues/new", "Public Issue Tracker"),
        Button.danger("exploit-confirm", "Confirm Report")
      )
      .setEphemeral(true).queue();
  }

  private void handleExploitReport(ButtonClickEvent event) {
    event.getTextChannel().createThreadChannel(Util.randomName(), !Pencil.DEVELOPMENT)
      .setAutoArchiveDuration(ThreadChannel.AutoArchiveDuration.TIME_24_HOURS)
      .setInvitable(false)
      .queue(
        (thread) -> thread.addThreadMember(event.getUser()).queue(
          (success) -> {
            event.reply("Thank you for starting your exploit report! Please put details of your exploit in %s"
              .formatted(thread.getAsMention())).setEphemeral(true).queue();
            Pencil.getExploitNotificationChannel().sendMessage("Exploit report created in %s by %s (`%s`)."
              .formatted(thread.getAsMention(), event.getUser().getAsMention(), event.getUser().getId())).queue();
          },
          (error) -> Pencil.getExploitNotificationChannel().sendMessage("Exploit report created in %s by %s (`%s`). **I was unable to automatically add the user to the created thread. This must be done manually**"
            .formatted(thread.getAsMention(), event.getUser().getAsMention(), event.getUser().getId())).queue()
        ),
        (error) -> fail(error, event)
      );
  }

  private void fail(Throwable t, ButtonClickEvent event) {
    LOGGER.error("Failed to setup exploit report", t);
    event.reply("Unable to automatically set up private channel for exploit report. Please contact a moderator directly.")
      .setEphemeral(true).queue();
  }
}
