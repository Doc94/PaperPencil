package me.sulu.pencil.listeners;

import com.github.mizosoft.methanol.MutableRequest;
import me.sulu.pencil.Pencil;
import me.sulu.pencil.util.Util;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.events.interaction.ButtonClickEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.Button;
import org.json.JSONException;
import org.json.JSONObject;

import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class ExploitHandler extends ListenerAdapter {

  @Override
  public void onButtonClick(ButtonClickEvent event) {
    switch (event.getComponentId()) {
      case "exploit-report" -> sendExploitConfirmation(event);
      case "exploit-confirm" -> handleExploitReport(event);
    }
  }

  private void sendExploitConfirmation(ButtonClickEvent event) {
    event.replyEmbeds(
      new EmbedBuilder()
        .setTitle("Are you sure you would like to open an exploit report?")
        .setDescription("Exploit reports are only for serious, gamebreaking and exploitable issues that are better reported privately. " +
          "For non-exploitable or well-known bugs, please create an issue on our public issue tracker. " +
          "If you are having trouble with your server or think you have found a bug but are not sure, ask in <#289587909051416579>.")
        .setFooter("To cancel your report, click \"Dismiss message\".", "https://static.sulu.me/images/logos/paper/64.webp")
        .setColor(9966604)
        .build()
    )
      .addActionRow(
        Button.link("https://github.com/PaperMC/Paper/issues/new", "Public Issue Tracker"),
        Button.danger("exploit-confirm", "Confirm Report")
      )
      .setEphemeral(true).queue();
  }

  private void handleExploitReport(ButtonClickEvent event) {
    try {
      String createdThreadID = Pencil.getDiscordAPI().sendAsync(
        MutableRequest.POST(
          "channels/" + event.getChannel().getId() + "/threads",
          HttpRequest.BodyPublishers.ofString(
            new JSONObject()
              .put("name", Util.randomName())
              .put("type", Pencil.DEVELOPMENT ? 11 : 12)
              .toString()
          )
        )
          .header("Content-Type", "application/json"),
        HttpResponse.BodyHandlers.ofString()
      )
        .thenApply(HttpResponse::body)
        .thenApply(JSONObject::new)
        .get(8, TimeUnit.SECONDS)
        .getString("id");

      int addUserStatus = Pencil.getDiscordAPI().sendAsync(
        MutableRequest.create("channels/" + createdThreadID + "/thread-members/" + event.getUser().getId())
          // have to do this rather than noBody() as it sends content-length other than `0` which for some reason discord rejects. TODO: find better way.
          .PUT(HttpRequest.BodyPublishers.ofString(" ")),
        HttpResponse.BodyHandlers.ofString()
      )
        .thenApply(HttpResponse::statusCode)
        .get(8, TimeUnit.SECONDS);

      if (addUserStatus != 204) {
        this.fail(null, event);
        Pencil.getExploitNotificationChannel().sendMessage(String.format(
          "Exploit report created in <#%s> by %s (`%s`) **I was unable to automatically add the user to the created thread. This must be done manually**.",
          createdThreadID,
          event.getUser().getAsMention(),
          event.getUser().getId()
        )).queue();
      } else {
        event.reply(String.format("Thank you for starting your exploit report! Please put the details of your exploit in <#%s>.", createdThreadID)).setEphemeral(true).queue();

        Pencil.getExploitNotificationChannel().sendMessage(String.format(
          "Exploit report created in <#%s> by %s (`%s`).",
          createdThreadID,
          event.getUser().getAsMention(),
          event.getUser().getId()
        )).queue();
      }
    } catch (InterruptedException | ExecutionException | TimeoutException | JSONException e) {
      e.printStackTrace();
      this.fail(e, event);
    }
  }

  private void fail(Throwable t, ButtonClickEvent event) {
    if (t != null) t.printStackTrace();
    event.reply("Unable to automatically set up private channel for exploit report. Please contact a moderator directly.")
      .setEphemeral(true).queue();
  }
}
